name: "Terraform Deploy"

defaults:
  run:
    working-directory: ./backend/williams/terraform

on:
  workflow_call:
    inputs:
      WORKSPACE:
        required: true
        type: string
      REGION:
        required: true
        type: string
      IMAGE_NAME:
        required: true
        type: string
      LAUNCHER_IMAGE_NAME:
        required: true
        type: string
      LAUNCHER_REGION:
        required: true
        type: string
    secrets:
      GOOGLE_CLOUD_GITHUB_SERVICE_ACCOUNT:
        required: true
      TERRAFORM_API_TOKEN:
        required: true
      SERVICE_ACCOUNT_NAME:
        required: true

env:
  TF_WORKSPACE: ${{ inputs.WORKSPACE }}
  TF_VAR_REGION: ${{ inputs.REGION }}
  TF_VAR_IMAGE_NAME: ${{inputs.IMAGE_NAME }}
  TF_VAR_LAUNCHER_REGION: ${{ inputs.LAUNCHER_REGION }}
  TF_VAR_LAUNCHER_IMAGE_NAME: ${{inputs.LAUNCHER_IMAGE_NAME }}
  TF_VAR_SERVICE_ACCOUNT_NAME: ${{secrets.SERVICE_ACCOUNT_NAME }}

jobs:
  terraform:
    name: "Terraform"
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup GCP Service Account
        uses: google-github-actions/auth@v1.0.0
        with:
          credentials_json: ${{ secrets.GOOGLE_CLOUD_GITHUB_SERVICE_ACCOUNT }}

      - name: Get GKE Creds
        uses: google-github-actions/get-gke-credentials@v1
        with:
          cluster_name: "acc-stg-dms"
          location: "us-central1"

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2.0.3
        with:
          cli_config_credentials_token: ${{ secrets.TERRAFORM_API_TOKEN }}

      - name: Terraform Init
        id: init
        run: terraform init -input=false

      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color

      - name: Terraform Plan
        id: plan
        if: github.event_name == 'pull_request'
        run: terraform plan -no-color -var-file=${{ inputs.WORKSPACE }}.tfvars
        continue-on-error: true

      - uses: actions/github-script@v6
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`

            <details><summary>Show Plan</summary>

            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`

            </details>

            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1

      - name: Terraform Apply
        if: ((github.ref == 'refs/heads/develop' || github.ref == 'refs/heads/main') && github.event_name == 'push') || github.event_name == 'workflow_dispatch'
        run: terraform apply -auto-approve -var-file=${{ inputs.WORKSPACE }}.tfvars
